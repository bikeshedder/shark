"""
Django settings for shark project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urlparse

import environ
from django.utils.translation import gettext_lazy as _

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Use different env file for CI runs
# "CI" env variable is set by Github runner
ENV_FILE = ".env.ci" if env.bool("CI", False) else ".env"
environ.Env.read_env(os.path.join(BASE_DIR, ENV_FILE))

BASE_URL = env("BASE_URL")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


def get_host(url: str):
    loc = urlparse(url).netloc
    host = loc.rsplit(":", 1)[0]
    return host


# Allowed hosts should not include protocol
ALLOWED_HOSTS = [get_host(url) for url in env.list("ALLOWED_HOSTS", default=[BASE_URL])]
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=[BASE_URL])


# Application definition
INSTALLED_APPS = [
    # Shark applications
    "shark",
    "shark.auth",
    "shark.base",
    "shark.billing",
    "shark.customer",
    "shark.project",
    "shark.tenant",
    "shark.sepa",
    "shark.id_generators",
    "supercollect",
    # Django Admin - order is mandatory
    # https://django-grappelli.readthedocs.io/en/latest/dashboard_setup.html#dashboard-setup
    "django.contrib.contenttypes",
    "grappelli.dashboard",
    "grappelli",
    "django.contrib.admin",
    # Django contrib
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Misc
    "dinbrief",
    "taggit",
    "localflavor",
    "rest_framework",
    "storages",
    "django_htmx",
    "heroicons",
    "tailwind",
    "django_browser_reload",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "shark.auth.middleware.login_required",
    "shark.tenant.middleware.add_tenant",
    "shark.tenant.middleware.remove_tenant_capturing_group",
    "django.middleware.gzip.GZipMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "django_browser_reload.middleware.BrowserReloadMiddleware",
]

ROOT_URLCONF = "shark.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.static",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "shark.tenant.context_processors.tenant",
            ]
        },
    },
]

WSGI_APPLICATION = "shark.wsgi.application"
AUTH_USER_MODEL = "shark_auth.User"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    # read os.environ['DATABASE_URL'] and raises
    # ImproperlyConfigured exception if not found
    "default": env.db(),
}

CACHES = {
    # Read os.environ['CACHE_URL'] and raises
    # ImproperlyConfigured exception if not found.
    "default": env.cache(),
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LOGIN_URL = "/auth/login"
LOGIN_REDIRECT_URL = "/app/"
LOGOUT_REDIRECT_URL = LOGIN_URL

# Apply login_required middleware for these url paths (admin is guarded by default)
LOGIN_REQUIRED_ROUTES = ["/app"]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "de"
LANGUAGES = [
    ("de", _("German")),
    ("en", _("English")),
]

TIME_ZONE = "UTC"


# Django storages / S3
# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html

S3_ENDPOINT_URL = env("S3_ENDPOINT_URL")
S3_PUBLIC_URL = env("S3_PUBLIC_URL", default=S3_ENDPOINT_URL)
S3_ACCESS_KEY = env("S3_ACCESS_KEY")
S3_SECRET_KEY = env("S3_SECRET_KEY")
S3_BUCKET_STATIC = env("S3_BUCKET_STATIC")
S3_BUCKET_MEDIA = env("S3_BUCKET_MEDIA")
S3_OPTIONS = {
    # According to the django-storages documentation it's also possible
    # to make those available via `settings.AWS_*` but this doesn't work
    # for the "staticfiles" storage. Therefore we provide ALL options
    # via the "OPTIONS" key.
    "endpoint_url": S3_ENDPOINT_URL,
    "public_url": S3_PUBLIC_URL,
    "access_key": S3_ACCESS_KEY,
    "secret_key": S3_SECRET_KEY,
    "querystring_auth": False,
    "file_overwrite": False,
}

STORAGES = {
    # static
    "staticfiles": {
        "BACKEND": "storages.backends.s3.S3ManifestStaticStorage",
        "OPTIONS": {
            **S3_OPTIONS,
            "bucket_name": S3_BUCKET_STATIC,
            "gzip": True,
        },
    },
    # media
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            **S3_OPTIONS,
            "bucket_name": S3_BUCKET_MEDIA,
        },
    },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = f"{S3_PUBLIC_URL}{S3_BUCKET_STATIC}/"
STATIC_ROOT = None  # BASE_DIR / "htdocs" / "static"


# Media files (Files uploaded by users)
# https://docs.djangoproject.com/en/4.2/topics/files/

MEDIA_URL = f"{S3_PUBLIC_URL}{S3_BUCKET_MEDIA}/"
MEDIA_ROOT = None  # BASE_DIR / "htdocs" / "media"


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

FORMAT_MODULE_PATH = "shark.base.formats"

GRAPPELLI_INDEX_DASHBOARD = "shark.dashboard.CustomIndexDashboard"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.TemplateHTMLRenderer",
    ),
}
